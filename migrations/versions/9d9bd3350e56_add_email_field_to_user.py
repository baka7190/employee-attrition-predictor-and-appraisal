"""Add email field to User

Revision ID: 9d9bd3350e56
Revises: 67d19f3375b5
Create Date: 2025-08-23 02:35:06.575817

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9d9bd3350e56'
down_revision = '67d19f3375b5'
branch_labels = None
depends_on = None


def upgrade():
    from sqlalchemy.sql import table, column
    from sqlalchemy import String

    # Step 1: Add email as nullable
    op.add_column('user', sa.Column('email', sa.String(length=120), nullable=True))

    # Step 2: Fill in default values for existing users
    user_table = table('user',
                       column('id', sa.Integer),
                       column('username', sa.String),
                       column('email', sa.String))

    conn = op.get_bind()
    results = conn.execute(sa.text('SELECT id, username FROM "user" WHERE email IS NULL')).fetchall()
    for row in results:
        fake_email = f"{row.username.lower()}@example.com"
        conn.execute(
            sa.text('UPDATE "user" SET email = :email WHERE id = :id'),
            {"email": fake_email, "id": row.id}
        )

    # Step 3: Make email non-nullable and unique
    op.alter_column('user', 'email', nullable=False)
    op.create_unique_constraint('uq_user_email', 'user', ['email'])


def downgrade():
    op.drop_constraint('uq_user_email', 'user', type_='unique')
    op.drop_column('user', 'email')



def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('password',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.drop_column('email')

    # ### end Alembic commands ###
